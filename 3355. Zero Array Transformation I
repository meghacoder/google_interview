https://leetcode.com/problems/zero-array-transformation-i/description/?envType=company&envId=google&favoriteSlug=google-thirty-days

Testcase
Test Result
Test Result
Code


3355. Zero Array Transformation I
Solved
Medium
Topics
Companies
Hint
You are given an integer array nums of length n and a 2D array queries, where queries[i] = [li, ri].

For each queries[i]:

Select a 
subset
 of indices within the range [li, ri] in nums.
Decrement the values at the selected indices by 1.
A Zero Array is an array where all elements are equal to 0.

Return true if it is possible to transform nums into a Zero Array after processing all the queries sequentially, otherwise return false.

 

Example 1:

Input: nums = [1,0,1], queries = [[0,2]]

Output: true

Explanation:

For i = 0:
Select the subset of indices as [0, 2] and decrement the values at these indices by 1.
The array will become [0, 0, 0], which is a Zero Array.
Example 2:

Input: nums = [4,3,2,1], queries = [[1,3],[0,2]]

Output: false

Explanation:

For i = 0:
Select the subset of indices as [1, 2, 3] and decrement the values at these indices by 1.
The array will become [4, 2, 1, 0].
For i = 1:
Select the subset of indices as [0, 1, 2] and decrement the values at these indices by 1.
The array will become [3, 1, 0, 0], which is not a Zero Array.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105
1 <= queries.length <= 105
queries[i].length == 2
0 <= li <= ri < nums.length
Seen this question in a real interview before?
1/5
Yes
No
Accepted
23.5K
Submissions
58K
Acceptance Rate
40.5%
Topics
Companies
0 - 3 months
Google
33


//code
//my approach is wrong becoz ater performing the operation 
// 0 0 1 a
// 0 0 1 prefix
// will not upadte the value correctly 

// class Solution {
// public:
//     bool isZeroArray(vector<int>& a, vector<vector<int>>& q) {
//         int n=q.size();
//         for(int i=0;i<n;i++)
//         {
//             a[q[i][0]]--;
//             if(q[i][1]+1<a.size())
//             a[q[i][1]+1]++;
//         }

//         int prefix_sum=0;

//         for(int i=0;i<a.size();i++)
//         {
//             prefix_sum=prefix_sum+a[i];
//             a[i]=prefix_sum;
//         }


//         for(int i=0;i<a.size();i++)
//         {
//             if(a[i]>0)
//             return 0;
//         }

//         return 1;



        
//     }
// };


class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {

        int n = nums.size();
        vector<int> prefix(n + 1, 0);

        for (auto& it : queries) {
            int l = it[0];
            int r = it[1];
            prefix[l] -= 1;       
            prefix[r + 1] += 1;     
        }

        for (int i = 1; i < n; i++) {
            prefix[i] += prefix[i - 1];
        }

        for (int i = 0; i < n; i++) {
            if (prefix[i] + nums[i] > 0)
                return false;
        }

        return true;
    }
};
