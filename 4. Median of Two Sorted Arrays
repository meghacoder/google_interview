4. Median of Two Sorted Arrays
Solved
Hard
Topics
Companies
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106
Seen this question in a real interview before?
1/5
Yes
No
Accepted
3M
Submissions
7.2M
Acceptance Rate
42.2%
Topics
Companies
0 - 3 months
Google
22
Amazon
13
Meta
11
Bloomberg
8
Goldman Sachs
7
Microsoft
6
Adobe
2
Oracle
2
0 - 6 months
Wix
5
Rippling
4
Apple
3
Zoho
2
Yahoo
2
Capgemini
2
Dropbox
2
Zenefits
2

//code

method-1 
//complexcity o(n+m)

class Solution {
public:
    double findMedianSortedArrays(vector<int>& a1, vector<int>& a2) {
        vector<int> vec;
        int n=a1.size();
        int m=a2.size();
        int i=0;
        int j=0;
        while(i<n && j<m)
        {
            if(a1[i]<=a2[j])
            {
                vec.push_back(a1[i]);
                i++;
            }
            else
            {
                vec.push_back(a2[j]);
                j++;
            }
        }

        while(i<n)
        {
            vec.push_back(a1[i]);
            i++;
        }
        
        while(j<m){
            vec.push_back(a2[j]);
            j++;
        }

        double ans=0.0;

        if((vec.size())%2!=0)
        {
            ans=vec[vec.size()/2];

        }
        else
        {
            ans=(vec[vec.size()/2]+vec[vec.size()/2-1])/2.0;


        }
        return ans;
    }
};
