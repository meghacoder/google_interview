https://leetcode.com/problems/two-best-non-overlapping-events/description/?envType=company&envId=google&favoriteSlug=google-thirty-days
2054. Two Best Non-Overlapping Events
Solved
Medium
Topics
Companies
Hint
You are given a 0-indexed 2D integer array of events where events[i] = [startTimei, endTimei, valuei]. The ith event starts at startTimei and ends at endTimei, and if you attend this event, you will receive a value of valuei. You can choose at most two non-overlapping events to attend such that the sum of their values is maximized.

Return this maximum sum.

Note that the start time and end time is inclusive: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time t, the next event must start at or after t + 1.

 

Example 1:


Input: events = [[1,3,2],[4,5,2],[2,4,3]]
Output: 4
Explanation: Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.
Example 2:

Example 1 Diagram
Input: events = [[1,3,2],[4,5,2],[1,5,5]]
Output: 5
Explanation: Choose event 2 for a sum of 5.
Example 3:


Input: events = [[1,5,3],[1,5,1],[6,6,5]]
Output: 8
Explanation: Choose events 0 and 2 for a sum of 3 + 5 = 8.
 

Constraints:

2 <= events.length <= 105
events[i].length == 3
1 <= startTimei <= endTimei <= 109
1 <= valuei <= 106
Seen this question in a real interview before?
1/5
Yes
No
Accepted
97.7K
Submissions
159K
Acceptance Rate
61.5%
Topics
Array
Binary Search
Dynamic Programming
Sorting
Heap (Priority Queue)
Companies
0 - 3 months
Google
8
Amazon
5
Microsoft
2
0 - 6 months
razorpay
2



//code

vector<vector<int>> dp(100001, vector<int>(3, -1));


bool is(vector<vector<int>> &a, int mid, int val)
{
    if(a[mid][0]>val)
    return 1;
    return 0;

}

int binary_search(vector<vector<int>> &a, int low, int high, int val, int n)
{
    int ans=n;
    int mid;
    while(low<=high)
    {
        mid=low+(high-low)/2;
        if(is(a, mid, val))
        {
            ans=mid;
            high=mid-1;
        }
        else
        {
            low=mid+1;
        }
    }
    return ans;


}


int max_sum_of_at_most_two_non_overlapping_events(vector<vector<int>> &a, int count , int ind, int n)
{
    if(ind==n  || count==0)
    return 0;

    if(dp[ind][count]!=-1)
    return dp[ind][count];


    int not_include=max_sum_of_at_most_two_non_overlapping_events(a, count, ind+1, n);
    int next_ind=binary_search(a, ind, n-1, a[ind][1], n);
    int include=max_sum_of_at_most_two_non_overlapping_events(a, count-1, next_ind, n);

    int ans=max(not_include, include+a[ind][2]);
    dp[ind][count]=ans;
    return ans;

}

class Solution {
public:
    int maxTwoEvents(vector<vector<int>>& a) {
        // memset(dp, dp.size(), vector<int>(3, -1));

        for(int i=0;i<dp.size();i++)
        {
            for(int j=0;j<dp[i].size();j++)
            dp[i][j]=-1;

        }
        sort(a.begin(), a.end());
        int n=a.size();
        int ans=max_sum_of_at_most_two_non_overlapping_events(a, 2, 0, n);
        return ans;


        
    }
};
