https://leetcode.com/problems/climbing-stairs/submissions/1479770964/?envType=company&envId=google&favoriteSlug=google-thirty-days
70. Climbing Stairs88. Merge Sorted Array
Solved
Easy
Topics
Companies
Hint
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
 

Follow up: Can you come up with an algorithm that runs in O(m + n) time?

Seen this question in a real interview before?
1/5
Yes
No
Accepted
4M
Submissions
7.7M
Acceptance Rate
51.6%
Topics
Companies
0 - 3 months
Meta
86
Google
52
Amazon
38
Microsoft
18
Bloomberg
10
Hubspot
7
Squarespace
2
0 - 6 months
Accenture
4
Infosys
2
Apple
2
Oracle
2
Nvidia
2
Yandex
2
Swiggy
2
Canonical
2
6 months ago
Adobe
49
Uber
24
Yahoo
21
tcs
8
TikTok
8
IBM
6
Zoho
6
PayPal
5
LinkedIn
4
EPAM Systems
4

//code

vector<int> dp(46, -1);

int count_ways(int n)
{
    if(n<0)
    return 0;
    if(n==0)
    return 1;

    if(dp[n]!=-1)
    return dp[n];

    int ways= count_ways(n-1)+count_ways(n-2);
    dp[n]=ways;
    return ways;


}


class Solution {
public:
    int climbStairs(int n) {

        int ans=count_ways(n);
        return ans;

        
    }
};
